{"/home/travis/build/npmtest/node-npmtest-nlp-toolkit/test.js":"/* istanbul instrument in package npmtest_nlp_toolkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/lib.npmtest_nlp_toolkit.js":"/* istanbul instrument in package npmtest_nlp_toolkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nlp_toolkit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nlp_toolkit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nlp-toolkit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nlp_toolkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nlp_toolkit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nlp_toolkit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nlp_toolkit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nlp_toolkit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nlp_toolkit.__dirname + '/lib.npmtest_nlp_toolkit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/index.js":"module.exports = require('./lib');","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/index.js":"/**\n * Nlp.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar tokenizer = require('./tokenizer.js');\nvar prepare = require('./prepare.js');\nvar stopwords = require('./stopwords.js');\nvar stemmer = require('./stemmer.js');\nvar frequency = require('./frequency.js');\nvar idf = require('./idf.js');\nvar divide = require('./divide.js');\nvar serialize = require('./serialize.js');\nvar classifiers = require('./classifiers');\nvar crossValidation = require('./crossValidation.js');\nvar filters = require('./filters');\nvar calculate = require('./calculate');\nvar components = require('./components');\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = {\n  prepare: prepare,\n  tokenizer: tokenizer,\n  stopwords: stopwords,\n  stemmer: stemmer,\n  frequency: frequency,\n  idf: idf,\n  serialize: serialize,\n  divide: divide,\n  crossValidation: crossValidation,\n  classifiers: classifiers,\n  filters: filters,\n  calculate: calculate,\n  components: components\n};","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/tokenizer.js":"/**\n * Tokenize text.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\nvar debug = require('debug')('tokenizer');\n\n\n/**\n * VARIABLES.\n */\nvar DEFAULT_CHARACTERS = /[^\\w]/g;\nvar DEFAULT_SEPARATOR = /\\s/g;\nvar DEFAULT_ELIMINATE_NUMBERS = false;\nvar DEFAULT_TOLOWERCASE = true;\nvar DEFAULT_EMPTY_STRINGS = false;\n\n\n/**\n * FUNCTIONS.\n */\nfunction tokenizer(text, options) {\n\n  if (!options && typeof text === 'object') {\n    options = text;\n    text = '';\n  }\n\n  options = options || {};\n  options.characters = (options.characters instanceof RegExp) ? options.characters : DEFAULT_CHARACTERS;\n  options.separator = (options.separator instanceof RegExp) ? options.separator : DEFAULT_SEPARATOR;\n  options.eliminateNumbers = (options.hasOwnProperty('eliminateNumbers')) ? Boolean(options.eliminateNumbers) : DEFAULT_ELIMINATE_NUMBERS;\n  options.toLowerCase = (options.hasOwnProperty('toLowerCase')) ? Boolean(options.toLowerCase) : DEFAULT_TOLOWERCASE;\n  options.emptyStrings = (options.hasOwnProperty('emptyStrings')) ? Boolean(options.emptyStrings) : DEFAULT_EMPTY_STRINGS;\n\n  debug('characters', options.characters);\n  debug('separator', options.separator);\n  debug('eliminateNumbers', options.eliminateNumbers);\n  debug('toLowerCase', options.toLowerCase);\n  debug('emptyStrings', options.emptyStrings);\n\n  if (text) {\n    return tokenize(text, options);\n  }\n\n  return through2.obj(function (chunk, enc, callback) {\n\n    var _chunk = (chunk.hasOwnProperty('text')) ? chunk.text : chunk;\n\n    if (typeof _chunk !== 'string') {\n      return callback(new Error('Chunk is not a string ' + JSON.stringify(chunk)));\n    }\n\n    var tokens = tokenize(_chunk, options);\n\n    var response;\n\n    if (typeof chunk === 'object') {\n      chunk.text = tokens;\n      response = chunk;\n    } else {\n      response = tokens;\n    }\n\n    return callback(null, response);\n\n  });\n\n}\n\nfunction tokenize(text, options) {\n\n  var tokens = text.split(options.separator).map(function (token) {\n    token = token.replace(options.characters, '');\n    if (options.eliminateNumbers) {\n      token = token.replace(/^\\d+$/, '');\n    }\n    if (options.toLowerCase) {\n      token = token.toLowerCase();\n    }\n    return token;\n  }).filter(function (token) {\n    return !!token || options.emptyStrings;\n  });\n\n  return tokens;\n\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = tokenizer;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/prepare.js":"/**\n * Prepare data.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\n\n\n/**\n * FUNCTIONS.\n */\nfunction prepare(fn) {\n  fn = (typeof fn === 'function') ? fn : function (chunk) { return chunk; };\n  return through2.obj(function (chunk, enc, callback) {\n    var check = fn(chunk);\n    if (check) {\n      this.push(check);\n    }\n    return callback();\n  });\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = prepare;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/stopwords.js":"/**\n * Eliminate stopwords.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\nvar fs = require('fs');\nvar es = require('event-stream');\nvar path = require('path');\nvar Promise = require('bluebird');\nvar debug = require('debug')('stopwords');\n\n\n/**\n * VARIABLES.\n */\nvar DEFAULT_LANG = 'en';\nvar stopwordsCache = {};\n\n\n/**\n * FUNCTIONS.\n */\nfunction stopwords(text, options) {\n\n  if (!options && Object.prototype.toString.call(text) !== '[object Array]') {\n    options = text;\n    text = '';\n  }\n\n  options = options || {};\n  options.defaultLang = options.defaultLang || DEFAULT_LANG;\n  options.defaultFilename = options.defaultFilename || getFilename(options.defaultLang);\n  options.additionalWords = options.additionalWords || {};\n\n  if (Object.prototype.toString.call(options.additionalWords) === '[object Array]') {\n    options.additionalWords = {\n      all: options.additionalWords\n    };\n  } else {\n    options.additionalWords.all = (options.additionalWords.all) ? [].concat(options.additionalWords.all) : [];\n    options.additionalWords.default = (options.additionalWords.default) ? [].concat(options.additionalWords.default) : [];\n  }\n\n  var getLang = function () {\n    return 'default';\n  };\n\n  if (options.lang) {\n    if (typeof options.lang === 'function') {\n      getLang = options.lang;\n    } else {\n      getLang = function () {\n        return options.lang;\n      };\n    }\n  }\n\n  stopwordsCache.default = getStopwordsWrapper(options.defaultFilename, options.additionalWords, 'default');\n\n  if (text) {\n    return removeStopwords(text, options.lang || options.defaultLang);\n  }\n\n  debug('defaultLang', options.defaultLang);\n  debug('defaultFilename', options.defaultFilename);\n\n  function removeStopwords(text, lang) {\n    if (!stopwordsCache.hasOwnProperty(lang)) {\n      stopwordsCache[lang] = getStopwordsWrapper(getFilename(lang), options.additionalWords, lang);\n    }\n    return stopwordsCache[lang]()\n    .then(function (stopwordsCache) {\n      var tokens = text.filter(function (token) {\n        return !stopwordsCache.hasOwnProperty(token);\n      });\n      return tokens;\n    });\n  }\n\n  return through2.obj(function (chunk, enc, callback) {\n\n    var _chunk = (typeof chunk === 'object' && Object.prototype.toString.call(chunk) !== '[object Array]') ? chunk.text : chunk;\n    if (!_chunk || Object.prototype.toString.call(_chunk) !== '[object Array]') {\n      return callback(new Error('Chunk is not an array ' + JSON.stringify(chunk)));\n    }\n\n    removeStopwords(_chunk, getLang(chunk))\n    .then(function (tokens) {\n      var response;\n      if (Object.prototype.toString.call(chunk) !== '[object Array]') {\n        chunk.text = tokens;\n        response = chunk;\n      } else {\n        response = tokens;\n      }\n      return callback(null, response);\n    })\n    .catch(callback);\n\n  });\n\n}\n\nfunction getStopwordsWrapper(filename, additionalWords, lang) {\n  var singleStopwordsCache;\n  var _words = [].concat(additionalWords.all);\n  _words = _words.concat(additionalWords[lang] || additionalWords.default);\n  return function getStopwords() {\n    return new Promise(function (resolve, reject) {\n      if (singleStopwordsCache) {\n        return resolve(singleStopwordsCache);\n      }\n      var _stopwordsCache = {};\n      fs.createReadStream(filename, 'utf8')\n      .pipe(es.split())\n      .on('data', function (word) {\n        _stopwordsCache[word] = 1;\n      })\n      .on('end', function () {\n        singleStopwordsCache = _stopwordsCache;\n        _words.forEach(function (_word) {\n          singleStopwordsCache[_word] = 1;\n        })\n        return resolve(singleStopwordsCache);\n      })\n      .on('error', function (err) {\n        return reject(err);\n      });\n    });\n  };\n}\n\nfunction getFilename(lang) {\n  return path.resolve(__dirname, './stopwords/' + lang + '.txt');\n}\n\n/**\n * EXPORTS.\n */\nmodule.exports = stopwords;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/stemmer.js":"/**\n * Stem words.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\nvar DanishStemmer = require('snowball-stemmer.jsx/dest/danish-stemmer.common.js').DanishStemmer;\nvar DutchStemmer = require('snowball-stemmer.jsx/dest/dutch-stemmer.common.js').DutchStemmer;\nvar EnglishStemmer = require('snowball-stemmer.jsx/dest/english-stemmer.common.js').EnglishStemmer;\nvar FinnishStemmer = require('snowball-stemmer.jsx/dest/finnish-stemmer.common.js').FinnishStemmer;\nvar FrenchStemmer = require('snowball-stemmer.jsx/dest/french-stemmer.common.js').FrenchStemmer;\nvar GermanStemmer = require('snowball-stemmer.jsx/dest/german-stemmer.common.js').GermanStemmer;\nvar HungarianStemmer = require('snowball-stemmer.jsx/dest/hungarian-stemmer.common.js').HungarianStemmer;\nvar ItalianStemmer = require('snowball-stemmer.jsx/dest/italian-stemmer.common.js').ItalianStemmer;\nvar NorwegianStemmer = require('snowball-stemmer.jsx/dest/norwegian-stemmer.common.js').NorwegianStemmer;\nvar PortugueseStemmer = require('snowball-stemmer.jsx/dest/portuguese-stemmer.common.js').PortugueseStemmer;\nvar RomanianStemmer = require('snowball-stemmer.jsx/dest/romanian-stemmer.common.js').RomanianStemmer;\nvar RussianStemmer = require('snowball-stemmer.jsx/dest/russian-stemmer.common.js').RussianStemmer;\nvar SpanishStemmer = require('snowball-stemmer.jsx/dest/spanish-stemmer.common.js').SpanishStemmer;\nvar SwedishStemmer = require('snowball-stemmer.jsx/dest/swedish-stemmer.common.js').SwedishStemmer;\nvar TurkishStemmer = require('snowball-stemmer.jsx/dest/turkish-stemmer.common.js').TurkishStemmer;\nvar debug = require('debug')('stemmer');\n\n\n/**\n * VARIABLES.\n */\nvar stemmerLookup = {\n  da: DanishStemmer,\n  de: GermanStemmer,\n  en: EnglishStemmer,\n  fi: FinnishStemmer,\n  fr: FrenchStemmer,\n  hu: HungarianStemmer,\n  nl: DutchStemmer,\n  it: ItalianStemmer,\n  no: NorwegianStemmer,\n  pt: PortugueseStemmer,\n  ro: RomanianStemmer,\n  ru: RussianStemmer,\n  es: SpanishStemmer,\n  se: SwedishStemmer,\n  tr: TurkishStemmer\n};\nvar DEFAULT_STEMMER = 'en';\nvar stemmerCache = {};\n\n\n/**\n * FUNCTIONS.\n */\nfunction stemmer(text, options) {\n\n  if (!options && Object.prototype.toString.call(text) !== '[object Array]') {\n    options = text;\n    text = '';\n  }\n\n  options = options || {};\n  options.defaultStemmer = options.defaultStemmer || DEFAULT_STEMMER;\n\n  if (!stemmerCache.default) {\n    stemmerCache.default = new stemmerLookup[options.defaultStemmer]();\n  }\n\n  var getLang = function () {\n    return 'default';\n  };\n\n  if (options.lang) {\n    if (typeof options.lang === 'function') {\n      getLang = options.lang;\n    } else {\n      getLang = function () {\n        return options.lang;\n      };\n    }\n  }\n\n  if (text) {\n    return stemWords(text, options.lang || options.defaultStemmer);\n  }\n\n  function stemWords(text, lang) {\n    if (!stemmerLookup.hasOwnProperty(lang) && lang !== 'default') {\n      console.log(lang + ' is not a supported language for stemming.');\n      return text;\n    }\n    if (!stemmerCache.hasOwnProperty(lang)) {\n      stemmerCache[lang] = new stemmerLookup[lang]();\n    }\n    return text.map(function (token) {\n      return stemmerCache[lang].stemWord(token);\n    });\n  }\n\n  debug('defaultStemmer', options.defaultStemmer);\n\n  return through2.obj(function (chunk, enc, callback) {\n\n    var _chunk = (typeof chunk === 'object' && Object.prototype.toString.call(chunk) !== '[object Array]') ? chunk.text : chunk;\n    if (!_chunk || Object.prototype.toString.call(_chunk) !== '[object Array]') {\n      return callback(new Error('Chunk is not an array ' + JSON.stringify(chunk)));\n    }\n\n    var tokens = stemWords(_chunk, getLang(chunk));\n\n    var response;\n    if (Object.prototype.toString.call(chunk) !== '[object Array]') {\n      chunk.text = tokens;\n      response = chunk;\n    } else {\n      response = tokens;\n    }\n\n    return callback(null, response);\n\n  });\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = stemmer;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/frequency.js":"/**\n * Create frequency distribution.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\nvar FreqDist = require('./components').FreqDist;\n\n\n/**\n * FUNCTIONS.\n */\nfunction frequency(text, options) {\n\n  if (!options && Object.prototype.toString.call(text) !== '[object Array]') {\n    options = text;\n    text = '';\n  }\n\n  options = options || {};\n\n  if (text) {\n    return FreqDist(text);\n  }\n\n  var _freq = FreqDist();\n\n  return through2.obj(function (chunk, enc, callback) {\n\n    var _chunk = (typeof chunk === 'object' && Object.prototype.toString.call(chunk) !== '[object Array]') ? chunk.text : chunk;\n    if (!_chunk || Object.prototype.toString.call(_chunk) !== '[object Array]') {\n      return callback(new Error('Chunk is not an array ' + JSON.stringify(chunk)));\n    }\n    if (options.cache) {\n      _freq.add(_chunk);\n      return callback();\n    }\n    return callback(null, FreqDist(_chunk));\n  }, function (callback) {\n    if (options.cache) {\n      this.push(_freq);\n    }\n    return callback();\n  });\n\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = frequency;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/components/index.js":"module.exports.Idf = require('./idf.js');\nmodule.exports.FreqDist = require('./freqDist.js');","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/components/idf.js":"/**\n * Create an Idf object.\n */\n\n\n'use strict';\n\n\nvar FreqDist = require('./').FreqDist;\n\n\nfunction Idf(freqDists) {\n\n  var _cache = {};\n  var _ordered;\n  var _size;\n  var _tokens;\n  var documents = 0;\n\n  if (freqDists) {\n    add(freqDists);\n  }\n\n  function add(freqDists) {\n    _reset();\n    freqDists = [].concat(freqDists);\n    freqDists.forEach(function (freqDist) {\n      documents += 1;\n      var _freqDist = (freqDist.hasOwnProperty('tokens') && typeof freqDist.tokens === 'function') ? freqDist : FreqDist(freqDist);\n      _freqDist.tokens().forEach(function (token) {\n        if (!_cache.hasOwnProperty(token)) {\n          _cache[token] = 0;\n        }\n        _cache[token] += 1;\n      });\n    });\n    return this;\n  }\n\n  function get(token) {\n    if (!_cache.hasOwnProperty(token)) {\n      return 0;\n    }\n    return Math.log(documents / _cache[token]);\n  }\n\n  function range(start, end) {\n    start = (typeof start !== 'undefined') ? start : 0;\n    end = (typeof end !== 'undefined') ? end : size() - 1;\n    if (typeof _ordered === 'undefined') {\n      _ordered = tokens().map(function (token) {\n        return {\n          name: token,\n          count: _cache[token],\n          idf: get(token)\n        };\n      });\n      _ordered.sort(function (a, b) {\n        return a.count > b.count ? 1 : -1;\n      });\n    }\n    return _ordered.slice(start, end);\n  }\n\n  function size() {\n    return (typeof _size !== 'undefined') ? _size : _size = tokens().length;\n  }\n\n  function tokens() {\n    return (typeof _tokens !== 'undefined') ? _tokens : _tokens = Object.keys(_cache);\n  }\n\n  function _reset() {\n    _size = undefined;\n    _tokens = undefined;\n  }\n\n  return {\n    add: add,\n    get: get,\n    range: range,\n    size: size,\n    tokens: tokens\n  };\n\n}\n\nmodule.exports = Idf;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/components/freqDist.js":"/**\n * Create an freqDist object.\n */\n\n\n'use strict';\n\n\nfunction FreqDist(_text) {\n\n  var _cache = {};\n  var _ordered;\n  var _size;\n  var _count;\n  var _tokens;\n\n  if (_text) {\n    add(_text);\n  }\n\n  function add(_text, _count) {\n    _reset();\n\n    if (_text.hasOwnProperty('merge') && typeof _text['merge'] === 'function') {\n      _cache = _text.merge(_cache);\n      return this;\n    }\n\n    _text = [].concat(_text);\n    if (typeof _count === 'undefined') {\n      _count = 1;\n    }\n    _text.forEach(function addToken(_token) {\n      if (!_cache.hasOwnProperty(_token)) {\n        _cache[_token] = 0;\n      }\n      _cache[_token] += _count;\n    });\n    return this;\n  }\n\n  function merge(external) {\n    for (var key in _cache) {\n      if (!external.hasOwnProperty(key)) {\n        external[key] = 0;\n      }\n      external[key] += _cache[key];\n    }\n    return external;\n  }\n\n  function count(token) {\n    if (token) {\n      return (_cache.hasOwnProperty(token)) ? _cache[token] : 0;\n    }\n    return (typeof _count !== 'undefined') ? _count : _count = Object.keys(_cache).reduce(function (p, c) {\n      return p + _cache[c];\n    }, 0);\n  }\n\n  function range(start, end) {\n    start = (typeof start !== 'undefined') ? start : 0;\n    end = (typeof end !== 'undefined') ? end : size();\n    if (typeof _ordered === 'undefined') {\n      var __count = count();\n      _ordered = tokens().map(function (token) {\n        return {\n          name: token,\n          count: _cache[token],\n          tf: _cache[token] / __count\n        };\n      });\n      _ordered.sort(function (a, b) {\n        return a.count > b.count ? 1 : -1;\n      });\n    }\n    return _ordered.slice(start, end);\n  }\n\n  function size() {\n    return (typeof _size !== 'undefined') ? _size : _size = Object.keys(_cache).length;\n  }\n\n  function tokens() {\n    return (typeof _tokens !== 'undefined') ? _tokens : _tokens = Object.keys(_cache);\n  }\n\n  function _reset() {\n    _count = undefined;\n    _ordered = undefined;\n    _size = undefined;\n    _tokens = undefined;\n  }\n\n  return {\n    add: add,\n    count: count,\n    merge: merge,\n    range: range,\n    size: size,\n    tokens: tokens\n  };\n\n}\n\nmodule.exports = FreqDist;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/idf.js":"/**\n * Create idf.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\nvar Idf = require('./components').Idf;\n\n\n/**\n * FUNCTIONS.\n */\nfunction idf(text, options) {\n\n  if (!options && Object.prototype.toString.call(text) !== '[object Array]') {\n    options = text;\n    text = '';\n  }\n\n  options = options || {};\n\n  if (text) {\n    return Idf(text);\n  }\n\n  var _idf = Idf();\n\n  return through2.obj(function (chunk, enc, callback) {\n\n    var _chunk = (chunk.hasOwnProperty('text')) ? chunk.text : chunk;\n    if (!_chunk || Object.prototype.toString.call(_chunk) !== '[object Array]' && !_chunk.hasOwnProperty('tokens')) {\n      return callback(new Error('Cannot use document ' + JSON.stringify(chunk)));\n    }\n\n    _idf.add(_chunk);\n\n    return callback();\n\n  }, function (callback) {\n    this.push(_idf);\n    return callback();\n  });\n\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = idf;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/divide.js":"/**\n * Divide data into sets.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\nvar debug = require('debug')('divide');\nvar _ = require('lodash');\n\n\n/**\n * FUNCTIONS.\n */\nfunction divide(options) {\n\n  options = options || {};\n  var sets = options.sets || [1, 1];\n  var maxItems = +options.maxItems;\n  var numSlots = sets.reduce(function(pv, cv) { return pv + cv; }, 0);\n  var slots = new Array(numSlots);\n\n  debug('sets', sets);\n\n  var done = options.done || function() {};\n  return through2.obj(function (chunk, enc, callback) {\n    var position = Math.floor(Math.random() * slots.length);\n    if (!slots[position]) {\n      slots[position] = [];\n    }\n    var slot = slots[position];\n    slot[slot.length] = chunk;\n    return callback();\n  }, function (callback) {\n    if (maxItems) {\n      maxItems = maxItems / numSlots;\n      slots = slots.map(function (slot) {\n        var _slot = _.shuffle(slot);\n        var _featureCounter = {};\n        return _slot.filter(function (item) {\n          if (!_featureCounter.hasOwnProperty(item.feature)) {\n            _featureCounter[item.feature] = 0;\n          }\n          _featureCounter[item.feature] += 1;\n          return (_featureCounter[item.feature] <= maxItems);\n        });\n      });\n    }\n    this.push(slots);\n    return callback();\n  });\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = divide;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/serialize.js":"/**\n * Serialize.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\nvar fs = require('fs');\n\n\n/**\n * FUNCTIONS.\n */\nfunction max(filename) {\n  var output = fs.createWriteStream(filename);\n  return through2.obj(function (chunk, enc, callback) {\n    output.write(JSON.stringify(chunk) + '\\n');\n    return callback(null, chunk);\n  });\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = max;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/classifiers/index.js":"module.exports.bayes = require('./bayes.js');","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/classifiers/bayes.js":"/**\n * Bayes classifier.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar bayes = require('bayes_fixed');\n\n\n/**\n * FUNCTIONS.\n */\nfunction bayesClassifier(trainingSet) {\n  var classifier = bayes();\n  return {\n    learn: function learn(sentence, feature) {\n      var _sentence = (typeof sentence === 'object' && Object.prototype.toString.call(sentence) !== '[object Array]') ? sentence.text : sentence;\n      if (typeof _sentence !== 'string') {\n        _sentence = _sentence.join(' ');\n      }\n      classifier.learn(_sentence, feature);\n    },\n    classify: function classify(sentence) {\n      var _sentence = (typeof sentence === 'object' && Object.prototype.toString.call(sentence) !== '[object Array]') ? sentence.text : sentence;\n      if (typeof _sentence !== 'string') {\n        _sentence = _sentence.join(' ');\n      }\n      return classifier.categorize(_sentence);\n    }\n  };\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = bayesClassifier;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/crossValidation.js":"/**\n * Module to validate classifiers via cross validation.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\nvar validateClassifier = require('./validateClassifier.js');\n\n\n/**\n * FUNCTIONS.\n */\nfunction crossValidation(options) {\n  options = options || {};\n  var classifiers = options.classifiers || [];\n  classifiers = [].concat(classifiers);\n  var results = [];\n  return through2.obj(function (chunk, enc, callback) {\n    results = classifiers.map(function (classifier) {\n      return chunk.map(function (el, index) {\n        var testData = [].concat.apply([], chunk.slice(index, index+1));\n        var trainingData = [].concat.apply([], chunk.slice(0, index).concat(chunk.slice(index+1)));\n        return validateClassifier({\n          testSet: testData,\n          trainingSet: trainingData,\n          classifier: classifier\n        });\n      });\n    });\n    return callback();\n  }, function (callback) {\n    this.push(results);\n    return callback();\n  });\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = crossValidation;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/validateClassifier.js":"/**\n * Module to validate classifiers.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar debug = require('debug')('validateClassifier');\n\n\n/**\n * FUNCTIONS.\n */\nfunction validateClassifier(options) {\n\n  options = options || {};\n  var trainingSet = options.trainingSet || [];\n  var testSet = options.testSet || [];\n  var classifier = options.classifier;\n  var _classifier = classifier();\n\n  debug('trainingSet.length', trainingSet.length);\n  debug('testSet.length', testSet.length);\n\n  trainingSet.forEach(function (sentence) {\n    if (sentence) {\n      _classifier.learn(sentence, sentence.feature);\n    }\n  });\n\n  return testSet.map(function (sentence) {\n    if (!sentence) {\n      return false;\n    }\n    return {\n      feature: sentence.feature,\n      guess: _classifier.classify(sentence)\n    };\n  }).filter(function (sentence) {\n    return !!sentence;\n  });\n\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = validateClassifier;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/filters/index.js":"module.exports.min = require('./min.js');\nmodule.exports.max = require('./max.js');","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/filters/min.js":"/**\n * Min number of tokens.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\nvar debug = require('debug')('filters:min');\n\n\n/**\n * VARIABLES.\n */\nvar DEFAULT_MIN = 0;\n\n\n/**\n * FUNCTIONS.\n */\nfunction min(value) {\n  value = value || DEFAULT_MIN;\n\n  debug('value', value);\n\n  return through2.obj(function (chunk, enc, callback) {\n    var _chunk = (typeof chunk === 'object' && Object.prototype.toString.call(chunk) !== '[object Array]') ? chunk.text : chunk;\n    if (!_chunk || Object.prototype.toString.call(_chunk) !== '[object Array]') {\n      return callback(new Error('Chunk is not an array ' + JSON.stringify(chunk)));\n    }\n    if (_chunk.length < value) {\n      return callback();\n    }\n    return callback(null, chunk);\n  });\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = min;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/filters/max.js":"/**\n * Max number of tokens.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar through2 = require('through2');\n\n\n/**\n * VARIABLES.\n */\nvar DEFAULT_MAX = Infinity;\n\n\n/**\n * FUNCTIONS.\n */\nfunction max(value) {\n  value = value || DEFAULT_MAX;\n  return through2.obj(function (chunk, enc, callback) {\n    var _chunk = (typeof chunk === 'object' && Object.prototype.toString.call(chunk) !== '[object Array]') ? chunk.text : chunk;\n    if (!_chunk || Object.prototype.toString.call(_chunk) !== '[object Array]') {\n      return callback(new Error('Chunk is not an array ' + JSON.stringify(chunk)));\n    }\n    if (_chunk.length > value) {\n      return callback();\n    }\n    return callback(null, chunk);\n  });\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = max;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/calculate/index.js":"module.exports.accuracy = require('./accuracy.js');\nmodule.exports.derivation = require('./derivation.js');\nmodule.exports.texts = require('./texts.js');\nmodule.exports.features = require('./features.js');","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/calculate/accuracy.js":"/**\n * Module to calculate accuracy of classifiers.\n */\n\n\n/**\n * FUNCTIONS.\n */\nfunction accuracy(data) {\n  return data.map(function (classifier) {\n    return classifier.map(function (_set) {\n      return _set.reduce(calculateSentences, {\n        total: 0,\n        positive: 0,\n        negative: 0\n      });\n    }).reduce(calculateSets, {\n      total: 0,\n      positive: 0,\n      negative: 0\n    });\n  }).map(function (result) {\n    result.accuracy = Math.round(result.positive * 100 / result.total) / 100;\n    return result;\n  });\n}\n\nfunction calculateSentences(p, c) {\n  p.total += 1;\n  var guess = c.guess.category || c.guess;\n  if (guess === c.feature) {\n    p.positive += 1;\n  } else {\n    p.negative += 1;\n  }\n  return p;\n}\n\nfunction calculateSets(p, c) {\n  p.total += c.total;\n  p.positive += c.positive;\n  p.negative += c.negative;\n  return p;\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = accuracy;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/calculate/derivation.js":"/**\n * Calculate standard derivation.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\nvar math = require('mathjs');\n\n\n/**\n * FUNCTIONS.\n */\nfunction derivation(data, options) {\n  var derivs = options.derivation || 1;\n  return data.map(function (classifier) {\n    var results = {\n      lost: 0,\n      positives: 0,\n      negatives: 0,\n      won: 0,\n      positivesWon: 0,\n      negativesWon: 0\n    };\n    classifier.forEach(function (_set) {\n      _set.forEach(function (entry) {\n        var guess = entry.guess.category || entry.guess;\n        entry.guess.distribution.sort(function (a, b) {\n          return (a.prob > b.prob) ? -1 : 1;\n        });\n        var _deriv = math.std(entry.guess.distribution.map(function (cat) {\n          return cat.prob;\n        }));\n        if (entry.guess.distribution[0].prob - (_deriv * derivs) <= entry.guess.distribution[1].prob) {\n          results.lost++;\n          if (guess === entry.feature) {\n            results.positives++;\n          } else {\n            results.negatives++;\n          }\n        } else {\n          results.won++;\n          if (guess === entry.feature) {\n            results.positivesWon++;\n          } else {\n            results.negativesWon++;\n          }\n        }\n      });\n    });\n    results.positives = results.positives / results.lost;\n    results.negatives = results.negatives / results.lost;\n    results.positivesWon = results.positivesWon / results.won;\n    results.negativesWon = results.negativesWon / results.won;\n    return results;\n  });\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = derivation;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/calculate/texts.js":"/**\n * Calculate texts.\n */\n\n\n'use strict';\n\n\n/**\n * MODULES.\n */\n\n\n/**\n * FUNCTIONS.\n */\nfunction texts(data, options) {\n  options = options || {};\n  var amount = options.amount || 5;\n  return data.map(function (classifier) {\n    var results = {};\n    classifier.forEach(function (_set) {\n      _set.forEach(function (entry) {\n        var guess = entry.guess.category || entry.guess;\n        var feature = entry.feature;\n        if (guess == feature) {\n          var dist = entry.guess.distribution.filter(function (prob) {\n            return prob.cat === guess\n          })[0]\n          if (dist) {\n            if (!results.hasOwnProperty(guess)) {\n              results[guess] = [];\n            }\n            results[guess].push({\n              prob: dist.prob,\n              original: entry.guess.original\n            });\n          }\n        }\n      });\n    });\n    // for (var key in results) {\n    //   results[key].sort(function (a, b) {\n    //     return (a.prob > b.prob) ? -1 : 1;\n    //   });\n    //   var obj = {\n    //     top: results[key].slice(0, amount),\n    //     bottom: results[key].slice(0 - amount)\n    //   };\n    //   results[key] = obj;\n    // }\n    return results;\n  });\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = texts;","/home/travis/build/npmtest/node-npmtest-nlp-toolkit/node_modules/nlp-toolkit/lib/calculate/features.js":"/**\n * Calculate feature results.\n */\n\n\n/**\n * FUNCTIONS.\n */\nfunction features(data) {\n  return data.map(function (classifier) {\n    return classifier.map(function (_set) {\n      return _set.reduce(calculateFeatures, {});\n    }).reduce(calculateSets, {});\n  }).map(function (result) {\n    for (var key in result) {\n      var entry = result[key];\n      entry.precision = Math.round(entry.positive * 100 / entry.total) / 100;\n      entry.accuracy = (Math.round(entry.positive * 100 / (entry.negative + entry.positive)) / 100) || 0;\n    }\n    return Object.keys(result).map(function (entry) {\n      return {\n        feature: entry,\n        total: result[entry].total,\n        positive: result[entry].positive,\n        negative: result[entry].negative,\n        precision: result[entry].precision,\n        accuracy: result[entry].accuracy\n      };\n    });\n  });\n}\n\nfunction calculateFeatures(p, c) {\n  if (!p[c.feature]) {\n    p[c.feature] = {\n      total: 0,\n      positive: 0,\n      negative: 0\n    };\n  }\n  p[c.feature].total += 1;\n  var guess = c.guess.category || c.guess;\n  if (guess === c.feature) {\n    p[c.feature].positive += 1;\n  } else {\n    if (!p[guess]) {\n      p[guess] = {\n        total: 0,\n        positive: 0,\n        negative: 0\n      };\n    }\n    p[guess].negative += 1;\n  }\n  return p;\n}\n\nfunction calculateSets(p, c) {\n  for (var key in c) {\n    if (!p[key]) {\n      p[key] = {\n        total: 0,\n        positive: 0,\n        negative: 0\n      };\n    }\n    p[key].total += c[key].total;\n    p[key].positive += c[key].positive;\n    p[key].negative += c[key].negative;\n  }\n  return p;\n}\n\n\n/**\n * EXPORTS.\n */\nmodule.exports = features;"}